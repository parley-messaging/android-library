package nu.parley.methods

import android.content.Context
import nu.parley.R
import nu.parley.android.Parley
import nu.parley.android.ParleyDataCallback
import nu.parley.android.ParleyNetwork
import nu.parley.android.data.messages.ParleyEncryptedDataSource
import nu.parley.android.data.model.ApiVersion
import nu.parley.util.ParleyCustomerAuthorization
import java.security.InvalidKeyException
import java.security.NoSuchAlgorithmException

@Suppress("unused")
object MethodsAdvanced {

    fun setReferrer() {
        Parley.setReferrer("https://parley.nu/") // Optional, default `null`
    }

    fun setNetwork() {
        val headers = mutableMapOf<String, String>()
        headers["X-Custom-Header"] = "Custom header value"

        val network = ParleyNetwork(
            "https://api.parley.nu/", // Default
            "clientApi/v1.9/", // Default
            ApiVersion.V1_9, // Must correspond to the same version in the path
            headers, // Optional, default empty map
        )

        Parley.setNetwork(network) // Optional, defaults to Parley configuration
    }

    fun enableOfflineMessaging(context: Context) {
        val dataSource = ParleyEncryptedDataSource(context, "1234567890123456")
        Parley.enableOfflineMessaging(dataSource) // Optional, default off
    }

    fun disableOfflineMessaging() {
        Parley.disableOfflineMessaging() // Disable offline messaging if it was enabled earlier
    }

    fun setUserAuthorizationKnown() {
        val additionalInformation = mutableMapOf<String, String>()
        additionalInformation[Parley.ADDITIONAL_VALUE_NAME] = "John Doe"
        additionalInformation[Parley.ADDITIONAL_VALUE_EMAIL] = "j.doe@parley.nu"
        additionalInformation[Parley.ADDITIONAL_VALUE_ADDRESS] = "Randstad 21 30, 1314, Nederland"

        val authorization = ParleyCustomerAuthorization.example()
        Parley.setUserInformation(authorization, additionalInformation)
    }

    /**
     * Registers a user for the chat with the provided customer id.
     * Here, the user authorization is generated by the device itself. However, generation of it
     * should be done elsewhere, as noted in [ParleyCustomerAuthorization].
     *
     * @see #setUserAuthorizationKnown() for a simple example when the user authorization is known.
     */
    fun setUserAuthorizationGenerate(
        customerId: String?,
    ) {
        if (customerId.isNullOrBlank()) {
            // Unregister, if previously was registered
            Parley.clearUserInformation()
            return
        }

        try {
            val userAuthorization = ParleyCustomerAuthorization.generate(
                customerId,
                "d13acc9e59d422cdec0d71a44bb571a5ab1de02f2e025198a610191fdf831e18ce84569b8af0893b85425a080f3d18055ba1bc44541b9c12373d3ec8045cb320" // Shared secret with Parley
            )
            Parley.setUserInformation(userAuthorization)
        } catch (e: InvalidKeyException) {
            R.string.identifier_customer_id_error_encryption
            e.printStackTrace()
        } catch (e: NoSuchAlgorithmException) {
            R.string.identifier_customer_id_error_encryption
            e.printStackTrace()
        }
    }

    fun clearUserAuthorization() {
        Parley.clearUserInformation() // Clear user information if needed (for example when the user logs out).
    }

    fun getUnseenCount(
        onSuccess: (count: Int) -> Unit,
        onFailure: (code: Int, message: String) -> Unit,
    ) {
        Parley.getUnseenCount(
            object : ParleyDataCallback<Int> {
                override fun onSuccess(count: Int) {
                    onSuccess(count)
                }

                override fun onFailure(code: Int, message: String) {
                    onFailure(code, message)
                }
            }
        )
    }

    fun setReferrer(referrer: String?) {
        Parley.setReferrer(referrer) // Optional, default is `null`
    }
}